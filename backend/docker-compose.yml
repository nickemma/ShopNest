version: '3.8'

services:
  # ------------------------ Data Layer ------------------------
  postgres:
    image: postgres:15-alpine
    networks:
      - data-net
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
      POSTGRES_DB: shopnest
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d shopnest"]  # Verify DB accessibility
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:alpine
    networks:
      - data-net
    command: redis-server --requirepass techieemma101
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3.12-management
    networks:
      - data-net
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: pass
      RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS: "-rabbitmq_management remove_definitions 'after_publish'"
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # ------------------------ Core Services ------------------------
  user-service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile
    networks:
      - app-net
      - data-net
    command: air -c .air-user.toml
    volumes:
      - ./services/user-service:/app
      - ./services/user-service/tmp:/app/tmp
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      - DB_URL=postgres://user:pass@postgres:5432/shopnest?sslmode=disable
      - REDIS_ADDR=redis:6379
      - REDIS_PASSWORD=techieemma101
      - RABBITMQ_URL=amqp://user:pass@rabbitmq:5672/
    ports:
      - "8080:8080"

#  product-service:
#    build:
#      context: ./services/product-service
#      dockerfile: Dockerfile
#    networks:
#      - app-net
#      - data-net
#    command: air -c .air-product.toml
#    volumes:
#      - ./services/product-service:/app
#      - ./services/product-service/tmp:/app/tmp
#    depends_on:
#      postgres:
#        condition: service_healthy
#      redis:
#        condition: service_healthy
#      elasticsearch:
#        condition: service_healthy
#    environment:
#      - DB_URL=postgres://user:pass@postgres.data-net:5432/shopnest?sslmode=disable
#      - ELASTICSEARCH_URL=http://elasticsearch.data-net:9200
#      - REDIS_ADDR=redis.data-net:6379
#
#  elasticsearch:
#    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.0
#    networks:
#      - data-net
#    environment:
#      - discovery.type=single-node
#    volumes:
#      - elasticsearch-data:/usr/share/elasticsearch/data
#    healthcheck:
#      test: [ "CMD-SHELL", "curl --silent --fail localhost:9200/_cluster/health || exit 1" ]
#      interval: 10s
#      timeout: 5s
#      retries: 5

  # ------------------------ Infrastructure ------------------------
  kong:
    image: kong:latest
    networks:
      - gateway-net
      - app-net
    depends_on:
      - user-service
#      - product-service
    environment:
      - KONG_DATABASE=off
      - KONG_DECLARATIVE_CONFIG=/kong/kong.yml
      - KONG_DNS_RESOLVER=127.0.0.11
      - KONG_DNS_HOSTSFILE=/etc/hosts
      - KONG_ADMIN_GUI_PATH=/
      - KONG_PROXY_LISTEN=0.0.0.0:8000
      - KONG_ADMIN_LISTEN=0.0.0.0:8001
      - KONG_ADMIN_GUI_URL=http://localhost:8002
    volumes:
      - ./api-gateway/kong.yml:/kong/kong.yml
    ports:
      - "8000:8000"  # Proxy
      - "8001:8001"  # Admin API
      - "8002:8002"  # Admin GUI

  swagger-ui:
    image: swaggerapi/swagger-ui
    networks:
      - gateway-net
    ports:
      - "8081:8080"
    volumes:
      - ./docs/api/swagger.yaml:/usr/share/nginx/html/swagger.yaml
    environment:
      - SWAGGER_JSON=/usr/share/nginx/html/swagger.yaml

  # ------------------------ Workers ------------------------
  email-worker:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile
    networks:
      - app-net
    command: air -c .air-email.toml
    volumes:
      - ./services/user-service:/app
      - ./services/user-service/tmp:/app/tmp
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      - RABBITMQ_URL=amqp://user:pass@rabbitmq:5672/
      - SMTP_SERVER=smtp.gmail.com
      - SMTP_PORT=587
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}

networks:
  data-net:
    driver: bridge
  app-net:
    driver: bridge
  gateway-net:
    driver: bridge

volumes:
  postgres-data:
  rabbitmq-data:
#  elasticsearch-data:
